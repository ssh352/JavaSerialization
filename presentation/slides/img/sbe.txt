public class SbeSerializer {

    private static final Employee EMPLOYEE_SBE = new Employee();
    private static final MessageHeader MESSAGE_HEADER = new MessageHeader();
    private static byte[] NAME;
    private static byte[] DEPARTMENTA;
    private static byte[] DEPARTMENTB;
    private static byte[] DEPARTMENTC;
    final ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4096);
    final DirectBuffer directBuffer = new DirectBuffer(byteBuffer);

    static {
        try {
            NAME = "John Doe".getBytes(Employee.employeeNameCharacterEncoding());
            DEPARTMENTA = "IT".getBytes(Employee.departmentACharacterEncoding());
            DEPARTMENTB = "RD".getBytes(Employee.departmentBCharacterEncoding());
            DEPARTMENTC = "TECH".getBytes(Employee.departmentCCharacterEncoding());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public void serializeDeserialize() throws IOException {

        final short messageTemplateVersion = 0;
        int bufferOffset = 0;

        MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion)
        .blockLength(EMPLOYEE_SBE.sbeBlockLength())
        .templateId(EMPLOYEE_SBE.sbeTemplateId())
        .schemaId(EMPLOYEE_SBE.sbeSchemaId())
        .version(EMPLOYEE_SBE.sbeSchemaVersion());

        bufferOffset += MESSAGE_HEADER.size();

        encode(EMPLOYEE_SBE, directBuffer, bufferOffset);

        bufferOffset = 0;
        MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion);

        final int actingBlockLength = MESSAGE_HEADER.blockLength();
        final int schemaId = MESSAGE_HEADER.schemaId();
        final int actingVersion = MESSAGE_HEADER.version();

        bufferOffset += MESSAGE_HEADER.size();

        try {
            decode(EMPLOYEE_SBE, directBuffer, bufferOffset, actingBlockLength, actingVersion);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int encode(final Employee employee, final DirectBuffer directBuffer, final int bufferOffset) {
        final int srcOffset = 0;
        employee.wrapForEncode(directBuffer, bufferOffset)
        .employeeId(12345)
        .salery(123456.12)
        .consultant(BooleanType.TRUE)
        .putEmployeeName(NAME, srcOffset, NAME.length);
        employee.putDepartmentA(DEPARTMENTA, srcOffset, DEPARTMENTA.length);
        employee.putDepartmentB(DEPARTMENTB, srcOffset, DEPARTMENTB.length);
        employee.putDepartmentC(DEPARTMENTC, srcOffset, DEPARTMENTC.length);
        return employee.size();
    }


    public static void decode(final Employee employee,
        final DirectBuffer directBuffer,
        final int bufferOffset,
        final int actingBlockLength,
        final int actingVersion) throws Exception {
        final byte[] buffer = new byte[128];
        final StringBuilder sb = new StringBuilder();
        employee.wrapForDecode(directBuffer, bufferOffset, actingBlockLength, actingVersion);
    }
}
